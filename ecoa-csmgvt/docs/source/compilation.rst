.. Copyright 2023 Dassault Aviation
.. MIT License (see LICENSE.txt)

.. _compilation:

Compilation
===========

Unix
----

Run the following commands to generate a build system.

You can specify the build type with the option -DCMAKE_BUILD_TYPE (default is Debug):

.. code-block:: bash

    mkdir build
    cd build
    cmake3 .. [{-DCMAKE_BUILD_TYPE=Release; Debug; Profiling; Coverage}]

Then run the following command to build the project:

.. code-block:: bash

    make

Windows
-------

Microsoft Visual Studio
^^^^^^^^^^^^^^^^^^^^^^^

Make sure to set the path to the MSVC binaries before any other compilers in the
environment variables and run the following commands with your version of Visual Studio to generate a solution:

.. code-block:: batch

    mkdir build
    cd build
    cmake .. -G "Visual Studio XX 20XX"

Then run the following commands to build the solution.

You can specify the configuration type with the option --config (default is Debug):

.. code-block:: batch

    cmake --build . [{--config Release; Debug; Profiling; Coverage}]

or on the Windows File Explorer:

1. Open the generated `.sln` file with Microsoft Visual Studio
2. Right-click on the first item in the **Solution Explorer** panel on the right side
3. Click on **Build Solution**
4. Click on **Debug** and then on **Start Without Debugging**

MinGW
^^^^^

Make sure to set the path to the MinGW binaries before any other compilers in the
environment variables and run the following commands to generate a Code::Blocks project:

.. code-block:: batch

    mkdir build
    cd build
    cmake .. -G "CodeBlocks - MinGW Makefiles"

Then:

.. code-block:: batch

    cmake --build .

or on the Windows File Explorer:

1. Open the generated `.cbp` file with Code::Blocks
2. Click on **Build** then **Select target** and select the project name
3. Click again on **Build** and then on **Build and run**

General guide
-------------

Add the flag `-D64BIT_SUPPORT=ON` to the cmake command if your project is using specifics 64 bit code.

Build mode
----------

The CMake configuration file allow the compilation of the files generated by the tools in 4 modes:

Release
^^^^^^^

* In Linux, building the project in Release mode generates the fully optimized shared libraries.
* In Windows, building the solution in Release mode creates a Release folder that contains only the fully optimized shared libraries.

Debug
^^^^^

* In Linux, building the project in Debug mode generates the shared libraries which contains debug symbols.
* In Windows, building the solution in Debug mode creates a Debug folder that contains the shared libraries and the debug files \*.pdb.

Profiling
^^^^^^^^^

* In Linux, building the project in Profiling mode generates the static libraries (because it's not possible to profile shared libraries in Linux).
* In Windows, building the solution in Profiling mode has the same behaviour than building it in Release mode (because the Visual Studio profiler works weel with the Release configuration), it creates a Profiling folder that contains the fully optimized shared libraries.

Coverage
^^^^^^^^

* In Linux, building the project in Coverage mode generated the shared librairies and the files \*.gcno needed for the code coverage.
* In Windows, building the solution in Coverage mode has the same behaviour than building it in Debug mode (because the Visual Studio Code Coverage works weel with the Debug configuration), it creates a Coverage folder that contains the shared libraries and the debug files \*.pdb.

All other modes are not supported.
